package com.cars24.fullstack.service.impl;

import com.cars24.fullstack.data.dao.ProductDao;
import com.cars24.fullstack.data.dto.ProductDto;
import com.cars24.fullstack.data.entity.ProductEntity;
import com.cars24.fullstack.data.repository.ProductRepository;
import com.cars24.fullstack.data.request.ProductRequest;
import com.cars24.fullstack.data.response.ApiResponse;
import com.cars24.fullstack.exception.ProductNotFoundException;
import com.cars24.fullstack.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements ProductService {

    private final ProductDao productDao;  // Using DAO instead of directly using repository

    private final ProductRepository productRepository;
    // Get all products
    @Override
    public ApiResponse getAllProducts() {
        List<ProductEntity> products = productDao.getAllProducts();

        // Create ApiResponse with all products
        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("All products retrieved successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(products);

        return apiResponse;
    }

    public ApiResponse getProductByCategory(String category){
        List<ProductEntity> products = productDao.getProductByCategory(category);

        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("All products retrieved successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(products);

        return apiResponse;

    }

    public ApiResponse getProductCategoryList(){
        List<String> products = productDao.getProductCategoryList();

        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("All products retrieved successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(products);

        return apiResponse;

    }

    // Get a single product by ID
    @Override
    public ApiResponse getProductById(String id) {

        System.out.println("Fetching product with ID: " + id);

        boolean valid = productRepository.existsById(id);

        if (!valid) {
            System.out.println("Product NOT found for ID: " + id);
            return null;
        }

        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("All products retrieved successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(productDao.getProductById(id));
        System.out.println(productDao.getProductById(id));


        return apiResponse;
    }




    // Add a new product
    @Override
    public ApiResponse addProduct(ProductRequest request) {
        ProductEntity product = new ProductEntity(
                null,  // ID will be generated by MongoDB
                request.getName(),
                request.getImage(),
                request.getSeller(),
                request.getPrice(),
                request.getDescription(),
                request.getCategory()  // Set category from request
        );

        ProductEntity savedProduct = productDao.addProduct(product);

        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.CREATED.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("Product added successfully");
        apiResponse.setService("AppProduct " + HttpStatus.CREATED.value());
        apiResponse.setData(savedProduct);

        return apiResponse;
    }


    // Update a product by ID
    @Override
    public ApiResponse updateProduct(String id, ProductRequest request) {
        ProductEntity product = new ProductEntity(
                id,
                request.getName(),
                request.getImage(),
                request.getSeller(),
                request.getPrice(),
                request.getDescription(),
                request.getCategory()  // Include category
        );

        ProductEntity updatedProduct = productDao.updateProduct(id, product);

        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("Product updated successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(updatedProduct);

        return apiResponse;
    }


    // Delete a product by ID
    @Override
    public ApiResponse deleteProduct(String id) {
        productDao.deleteProduct(id);

        // Create ApiResponse for deleted product
        ApiResponse apiResponse = new ApiResponse();
        apiResponse.setStatuscode(HttpStatus.OK.value());
        apiResponse.setSuccess(true);
        apiResponse.setMessage("Product deleted successfully");
        apiResponse.setService("AppProduct " + HttpStatus.OK.value());
        apiResponse.setData(null);  // No data to return for deletion

        return apiResponse;
    }
}
